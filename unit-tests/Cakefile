fs = require 'fs'
{print} = require 'util'
{spawn, exec} = require "child_process"

listOfFiles = [
  "MeteorStubs.coffee ../lib/TLog.coffee test.coffee"
,
  "../lib/EventLogger.coffee ../lib/server/DDPLogger.coffee EventLogger.coffee"
]


files = ["MeteorStubs.coffee", "../TLog.coffee", "test.coffee"]

task "compile", "Compile unit tests", ->
  for lf,i in listOfFiles
    exec " coffee -j test#{i}.js -c " + lf, (err, stdout, stderr) ->
      throw err if err
      console.log stdout + stderr

task "test", "Run unit tests", ->
  exec " mocha -R spec --colors *.js", (err, stdout, stderr)->
    #throw err if err
    console.log stdout + stderr


# TODO: need to build a proper recursion
buildBatch = (inFiles, outFile, cb)-> exec " coffee -j #{outFile} -c " + inFiles, cb
buildAll = (cb)->
  for lf,i in listOfFiles
    buildBatch lf, "test#{i}.js", cb


task "watch", "Run unit tests watching for changes", ->
  coffee = spawn 'coffee', ['-w', '-j', 'tests.js', '-c'].concat files
  coffee.stderr.on 'data', (data) -> process.stderr.write data.toString()
  coffee.stdout.on 'data', (data) -> print data.toString()
  coffee.on 'exit', (code) -> print 'Finished coffee' + code
  console.log 'Spawned coffee'
  mocha = spawn 'mocha', ['-R', 'spec', '--watch', '--colors', '*.js']
  console.log 'Spawned mocha'
  mocha.stdout.pipe process.stdout, end: false
  mocha.stderr.pipe process.stderr, end: false
  mocha.on 'exit', (code) -> callback?(code,code)