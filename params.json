{"name":"Observatory","tagline":"Powerful, yet easy to use, logging and monitoring package for Meteor framework. ","body":"What is it?\r\n-------------\r\nThis is Observatory v0.2.6 - a [Meteorite](https://github.com/oortcloud/meteorite) package that provides powerful, efficient\r\nand pretty logging and monitoring for [Meteor framework](http://meteor.com) application development.\r\n[See it in action!](http://observatoryjs.com/).\r\n\r\nWhat does it do?\r\n------------------\r\n* Easy logging with different log levels with corresponding methods for message output, optional \r\nlogging to console, pretty output of both Client and Server logs right in the browser, optional logging of\r\nthe currently logged-in user for additional control.\r\n\r\n* NEW! Logging of http requests (yes, with client-side IP address - an infamous topic among Meteor devs :))\r\n\r\n* Monitoring of your application internals: currently, Templates with all events and a Session object; much more to come.\r\n\r\n* 2 visual styles: \"dark\" for additional \"terminal\" coolness and \"light\" that may be easier on the eyes. Adding a new theme is pretty\r\neasy even now and will be even easier soon - just look at observatory.less and theme() helper in observatoryTemplates.coffee.\r\n\r\n* [experimental] Testing support for your Meteor app with BDD / TDD like syntax. This is currently in alpha and moved to a\r\n[separate package](https://github.com/superstringsoftware/observatory-testing)\r\n\r\nInstallation\r\n-----------------\r\n#### With meteorite:\r\n\r\n\tmrt add observatory\r\n\r\nUsage\r\n---------\r\n\r\nSomewhere in the common code of your meteor app call:\r\n```coffeescript\r\nlogger = TLog.getLogger()\r\nlogger.setOptions(TLog.LOGLEVEL_MAX,true, true, true)\r\n#for other options, see API section below\r\n```\r\nThis will get you a logger that will log everything, will also output to the console (second parameter),\r\nwill log current user (third parameter) and http requests (last parameter).\r\n\r\nSince 0.2.6 new and preferred method of setting options is via 'meteor --settings <filename>' call. Example settings file is\r\nincluded and follows the format described below:\r\n\r\n```javascript\r\n{\r\n    \"public\": {\r\n        \"observatorySettings\": {\r\n            \"logLevel\": \"LOGLEVEL_DEBUG\",\r\n            \"printToConsole\": true,\r\n            \"logUser\": true,\r\n            \"logHttp\": true,\r\n            \"prohibitAutoPublish\": false\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis way you can use one set of settings while debugging (meteor --settings) and another - when deploying\r\n(meteor deploy --settings). By default observatory publishes logs to any user. If you set \"prohibitAutoPublish\" to true\r\nyou can set your own publishing criteria via calling TLog.publish that takes function of the userId as an argument.\r\nFor example, if you just want to publish to admin users:\r\n\r\n```coffeescript\r\nTLog.publish (uid)->\r\n      Meteor.users.findOne(uid)?.role is \"admin\"\r\n```\r\n\r\nIf you want to set logs removal permission, call allowRemove with allow function as an argument - it gets passed to\r\nCollection.allow({remove: ...}) call. If you call allowRemove with no arguments, it simply sets \"true\" so use with care.\r\nUsual Meteor restrictions on the client apply, so if you really want to clear logs you have to call `TLog._clear()` on\r\nthe server.\r\n```coffeescript\r\nTLog.allowRemove (uid)->\r\n    if Meteor.users.findOne(uid) == \"admin\"\r\n        true\r\n    else\r\n        false\r\n```\r\n\r\nWhen you want to log a message of a certain log level:\r\n```coffeescript\r\nTL.fatal(\"your message\",\"optional module name\")\r\nTL.error(\"your message\",\"optional module name\")\r\nTL.warn(\"your message\",\"optional module name\")\r\nTL.info(\"your message\",\"optional module name\")\r\nTL.verbose(\"your message\",\"optional module name\")\r\nTL.debug(\"your message\",\"optional module name\")\r\n\r\n# tracing errors - correctly handles both Meteor and regular js errors\r\nTL.trace(error, \"your message\", \"optional module name\")\r\n\r\n# inspecting objects\r\nTL.dir(object, \"your message\", \"optional module name\")\r\n```\r\nTo actually display the logs and use monitoring capabilities, plugin \"logs_bootstrap\" template anywhere in your Handlebars\r\ntemplates right before closing body tag:\r\n```html\r\n<body>\r\n  ...\r\n  {{>logs_bootstrap}}\r\n</body>\r\n```\r\n\r\nTo set the default panel to either hidden or half a screen, set the session variable:\r\n```coffeescript\r\nSession.set \"bl_default_panel\", \"hidden\" # or \"half\"\r\n```\r\n\r\nEverything else is done automagically, as always is the case with Meteor. See the code for \r\n[the sample app](https://github.com/jhoxray/telescope) and  \r\n[check it out live](http://observatoryjs.com).\r\n\r\n\r\nAPI\r\n---------\r\nIn addition to the functions above here's a short description of what else you may need.\r\n```coffeescript\r\nclass TLog\r\n  #setting desired log level and whether you also want to output your log messages to the console (true or false)\r\n  #Set log_user to true if you also want to log currently logged in user with every log message\r\n  #userId is stored in the uid field of the log collection document.\r\n  @getLogger: (currentLogLevel, printToConsole = true, log_user = false)->\r\n  \r\n  #log levels are defined as follows, so use TLog.LOGLEVEL_... when calling get Logger()\r\n  @LOGLEVEL_FATAL = 0\r\n  @LOGLEVEL_ERROR = 1\r\n  @LOGLEVEL_WARNING = 2\r\n  @LOGLEVEL_INFO = 3\r\n  @LOGLEVEL_VERBOSE = 4\r\n  @LOGLEVEL_DEBUG = 5\r\n  @LOGLEVEL_MAX = 6\r\n\r\n  #to change log level and console printing, use:\r\n  setOptions: (loglevel, want_to_print = true, log_user = false)\r\n```\r\nLog levels work in a very straightforward way: TLog will record any message which log level is <= current log level \r\nset in `setOptions()`.\r\n\r\nIf you are into internals type of person, Observatory logs all info to the \"_observatory_logs\"\r\nMeteor collection. Every document has the following fields:\r\n```coffeescript\r\n@_logs.insert\r\n    isServer: srv # boolean, whether called on the server or on the client\r\n    message: msg # message provided to any of the logging methods\r\n    module: module # module name provided to any of the logging methods\r\n    loglevel: loglevel # loglevel with which the message is logged\r\n    timestamp_text: ts # textual representation of the timestamp\r\n    timestamp: timestamp # timestamp as a Date()\r\n    full_message: full_message # full textual log message (useful for quick export etc)\r\n    uid: uid # currently logged in user id (if log_user option set to true)\r\n    ip: ip # IP address of the client in case it's an http request (working on logging socks requests too)\r\n    elapsedTime: time # time in ms, e.g. response time for http request, or method running time for profiling calls\r\n    customOptions: obj # any EJSONable object; currently cannot be set from public API but is filled when logging http calls\r\n```\r\nThis should be enough if you want to manipulate your logs in any way you want that Observatory\r\ndoes not provide out of the box. Access the \"_observatory_logs\" collection directly via\r\n```coffeescript\r\ncol = TLog._global_logs\r\n```\r\nand then all the usual Meteor Collection API is applicable.\r\n\r\n\r\nFeedback\r\n----------\r\nWe'd love to hear what you think, whether it's useful and which other features you'd want to see -- so please submit issues here on github or [leave a comment on our blog](http://superstringsoftware.com) \r\nto share your thoughts and ideas!\r\n\r\nRevision history\r\n-----------------\r\n####0.2.6: August, 28, 2013\r\n* Added Meteor.settings support\r\n* Better user logging options\r\n* Weak dependency on the bootstrap\r\n\r\n####0.2.53: August, 19, 2013\r\n* Updated to work with Meteor 0.6.5\r\n\r\n####0.2.1: March 25, 2013\r\n* Added http requests logging via connect middleware hook\r\n* Changed UI behavior so that Observatory modifies last child of &lt;body&gt; to be able to scroll main site content up\r\n* Preparation for Meteor 0.6.0 in terms of variables scoping\r\n* Internal package restructuring - moved core logger etc to a separate package (to be released separately soon)\r\n\r\n####0.2.0: March 18, 2013\r\nFirst minor release with \"real\" Meteor (auth, users, ui improvements).\r\n* Properly logging currently logged-in user\r\n* Works with Meteor 0.5.9\r\n* Code highlighting in the Templates Internals\r\n* Session as a separate panel\r\n* Unit testing moved to a [separate package](https://github.com/superstringsoftware/observatory-testing)\r\n* Keyboard based control of the panels (\"~\" and \"ctrl + ~\")\r\n* Setting default panel states via Session\r\n\r\n####0.1.9: March 6, 2013\r\nUpdate to support Meteor 0.5.7:\r\n* New logging methods (debug, trace, dir)\r\n* Meteor Authorization support\r\n* Some clean up of the logs display in the panel\r\n* Fixing template methods inspection for the new Meteor syntax\r\n* Preview version of unit testing\r\n\r\n####0.1.8: Oct, 2012\r\nMinor code clean up, ability to clear logs.\r\n\r\n####0.1.7\r\nSome styling changes, module names support:\r\n* added 2 themes: dark and light, switchable on the fly.\r\n* added module names support to easier sort through logs.\r\n* some css cleanup, started restyling to get away from Bootstrap dependency (still dependent though so if you use css names that\r\nare the same as Twitter Bootstrap is using you may get weird effects in your app - will remove in a future version).\r\n\r\n####0.1.5, 0.1.6\r\nBottom sliding panel with tabs added, monitoring / inspection capabilities added, files renamed, some cleanup started\r\n\r\n####0.1.1 \r\nClean up for visibility / encapsulation, now need to use TLog.getLogger() instead of constructing directly\r\n\r\n####0.1\r\nInitial commit \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}